基础知识
1．	介绍asp.net
2．	介绍asp.net和asp的区别
3．	说明Asp.net的application特性
4．	简述asp.net页面运行机制。
5．	简述ASP。NET一个页面的生命周期？
6．	C#ASP.NET托管代码是什么？
7．	C#非托管代码是什么？

开发环境
8．	IL语言如何在.net下运行
9．	如何使用实时编译进行代码优化。
10．	.NET中什么是私有程序集
11．	.NET中什么是共享程序集
12．	如何解决因共享组件而导致的应用程序之间的冲突。
13．	.NET程序开发环境和运行环境是什么。
14．	解决方案下的一个项目是否就代表一个程序集
15．	程序域是什么

部署与维护
16．	如果进行源代码的保护和版本间的维护
17．	什么是XCopy总署？
18．	如何通过安装向导配置一个Web站点
19．	简述C#中ClickOnce部署


程序设置基础
20．	C#支持哪几个预定义值类型。
主要包括五个类型：整形(byte、Sbyte、int16、int32、int64、Uint16、U….64)、浮点类型（Single、Double），字符(char)、bool(Boolean)、decimal。
21．	支持哪几个预定义引用类型。
Object和String两个
22．	如何解决装箱和拆箱引发的性能问题。
23．	有几种方法可以判断值类型和引用类型。
自定义的数据类型大部分是引用类型的。结构是值类型的。一般判断的方法是看它的基类是ValueType 还Object类型。
24．	如何理解C#中变量的作用域。
作用域是指可以访问变量的代码区域。只要变量所属的类在某作用域内，其字段也在作用域中。局部变量存在于声明该变量的块语句内，或大括号结束之前的作用域。

C#语句
25．	传递参数的方法
有四种传参方法：传值，传址，输出参数、数组参数。1.无需修饰；2.需要ref，3.需要out，4需要修饰符:params
26．	如何理解C#中的预处理命令。
27．	请简述C#中的main()方法
程序的入口点。程序从这里开始，也从这里结束，一个程序只能有一个Main()方法。
28．	如何理解C#中的指针
C#支持三种指针：受托管理指针、非托管理指针、非托管理函数指针。(*(取地址的值)  &：取地址)
指针类型不继承object，指针和Object之间不存在转换。此外装箱和拆箱也不支持指针。但是不同指针类型之间，以及指针类型与整形之间进行转换。
29．	请举例System.Collections中常用成员。
常用成员有：ArrayList、Hashtable,SortedList。常用接口有：ICollection、IEnumerable、IList、,结构DictionaryEntry可定义设置或检索的字典键/值对。
30．	C#提供了哪几咱循环结构
Do…while 、while、for和foreach四种特环。Do  while 和while用于循环次数不确定的场合。For用于有确定次数的场合。Foreach用于已知集合的循环操作。
31．	StringBuilder与String有哪些区别
String是只读的。在相同字符串操作上，使用StringBuilder类会比使用string对象更有效率。对少量字符串拼接的操作，使用String类比较方便。.net对String中扩展了许多便捷的字符串处理方法。
32．	如何实现自定义格式字符串输出。

33．	怎样实现灵活强大的格式化输出。
34．	请列举HashTable几种常用的遍历方法。
有以下四种遍历方式
以string对象为键值遍历哈希表
以自定义对象为键值遍历哈希表
以DictionaryEntry对象为键值遍历哈希表
通过继承IDictionaryEnumerator接口的对象来遍历哈希表


字符串与数组
35．	System.String是引用类型还是值类型。
System.String是引用类型的，它的只读特性使得它在对象对象实例化后就不能再修改，任何修改字符串对象的动作将导致一个新的字符串对象的生成。
36．	C#中String和string的区别是什么？
String是String的一个别名，两者没有区别。
37．	如何在Byte[]和String之间进行转换。
字符串和字节数组的转换依赖于编码方式，不同的编码标准使用不同的算法进行。System.Text.Encoding 类提供了大部分常见的编码算法支持，用于字符串和字节数组之间的转换。
38．	Array和ArrayList的区别对别。
表面上Array和ArraryList是类似的，都有索引(index)，并且可以通过index来直接获取和修改任意项。但两者的差别很大，主要体现在命名空间、变量声明、下限、添加插入或移出除某一范围元素的方法、维度、存储对象、存放方式、初使化大小、插入和删除等方面的并异。
39．	Array和ArrayList如何进行互相转换。


运算符与表达式
40．	C#中checked 和unchecked的作用是什么
Checked用于开启算术运算和显示转换的溢出检查，unchecked取消溢出检查
41．	C#中的三元运算符是什么。
三元运算符是? :,相当于if{}else 的简化。适用于：简单的判断和处理。
42．	C#中is和as 运算符有什么作用。
Is 检查给定对象是否兼容，如果兼容返回True,否则返回false。As 在兼容的引用类型之间进行转换，如果无法转换返回null而不引发异常。

时间操作
43．	C#中如何利用DateTime获取季度
44．	如何在DateTime时间追加工作日。
45．	如何进行DataTime时间与字符串之间的转换


对象
46．	类和结构有什么区别
都可以使用new操作符；结构是引用类型、类是引用类型；结构不能被继承，而类可以；结构与类的内部结构不同。结构没有默认的构造函数和析构函数，而类有默认的构造函数。
47．	简述C#中的虚方法
Virtual修饰的是虚方法，可以在派生类中被重写。虚方法必须并提供派生类覆盖该方法的选项，并且必须有实现部分。虚方法的作用就是在派生类中可以被重写。
48．	简述C#中的密封类和密封方法的特点
使用sealed关键字进行修饰，它不能用作其它类的其类，它没有派生类，密封类的作用是防止其它类继承。密封方法是使用sealed关键字进行修饰的的方法，它并不影响类的继承，但它可以防止重写基类中特定的虚方法。
49．	表态类构造方法的特点
50．	派生类中的构造函数
51．	接口及接口继承

事件
52．	什么是事件机制
53．	列举一个委托和事件的实例。
54．	请简述EventHandlerList的作用

委托
55．	什么是委托
委托是继承自System.Delegate的类型。委托的声明与方法签明相似，有一个返回值和任意类型的参数。委托是一种可用于封装命名或匿名方法的引用类型,提供了程序回调机制。委托类似于函数指针，但是委托是类型安全和可靠的。
56．	C#中初委托的方法必须是静态的吗
委托不仅能绑定静态方法，同时也可以绑定实例方法。当绑定实例方法时，Delegate.Target属性会设置成指向该实例方法所属类型的一个实例对象，当绑定静态方法时，Delegate.Target属性会设置成null。
57．	什么是多播委托
多播委托是指一个由委托串成的链表，当链表上的一个委托被回调时，所有链表上该委托的后续委托会被顺序执行。多播委托必须是同类型的，返回类型必须是void，并且不能带输出参数。
58．	列举一个C#中委托的应用
	

ASP.NET 的页对象
59．	Asp.net的Request对象有哪些
60．	Asp.net的Responese对象有哪些
61．	Asp.net的Server对象有哪些


ASP.NET的页语法
62．	什么是Web窗口,什么是Web用户控件。
    Web窗口可以简单认为是一个大的容器，这个容器装载了要实现功能的所有控件，包HTML控件和Server端控件.Web用户控件也是一个容器，功能和WEB窗口类似，Web用户控件能够很容易地跨ASP.NET的Web应用程序划分和重复使用公共功能。但与Web窗口不同的是，不能独立地请求Web用户控件，Web控件必须包含在Web窗口中才能
使用。

63．	什么是viewState
64．	ViewState优缺点有哪些
65．	Session、ViewState、Cookie之间有哪些区别
66．	如何使用GridView控件绑定数据源


ASP.NET控件
67．	请简述Asp.net中觉的页面跳转方法。
68．	什么是Web部件
69．	Web部件是如何通信的
70．	如何进行Web Part个性化
71．	MasterPage有何作用
72．	如何嵌套MasterPge


Froms身份难证
73．	请介绍Adp.net窗体身份验证的原理及配置过程
74．	请介绍Adp.net窗体身份验证方面的控制流程
75．	请论证Authentication所生成Cookie的安全性
76．	ASP.NET有几种存储会话状态的方式
77．	请介绍ASP.NET会话状态InProc的特点
78．	请介绍ASP.NET会话状态StateServer的特点
79．	请介绍ASP.NET会话状态SqlServer的特点


ADO.NET基础概念
80．	ADO.NET和数据库的关系
81．	ADO.NET支持多少种数据源
82．	如何提高数据库连接的使用效率
83．	如何安全地管理连接字符串
84．	Using子句管理数据库连接有何作用


数据库连接及访问
85．	ADO.NET如何控制数据库连接池
86．	ADO.NET中如何动态的执行SQL语句
87．	解释ADO.NET中的事务处理作用
88．	如何生成SqlDataAdapter的更新命令


Linq查询技术
89．	什么是LINQ
90．	LINQ查询关键字
91．	什么是LINQ  To  SQL查询技术
92．	什么是Linq to DataSet查询技术
93．	什么是Linq To XML查询技术


基础概念
94．	XML文档结构包括哪些
95．	简述XML的优缺点
96．	Soap协议由哪几部分组成
97．	什么是WSDL语言


读写XML数据
98．	如何将XML数据转换成HTML格式
99．	如何使用DOM操作XML文档
100．	C#中如何对XML数据进行排序
101．	.NET中如何读写流格式的XML
102．	..NET中如何实现XML串行化

Web Service开发
103．	如何在.NET项目中调用Web Service
104．	什么是异步请求Web Service
105．	如何缓存Web Service数据
106．	Web Service中的事务处理有哪些
107．	如何处理Web Service中的异常

Web Service的安全机制
108．	请举例觉的Web Service安全措施
109．	在Web Service中如何采用Windows身份证和授权
110．	在Web Service中如何采用SOAP标头自定义身份验证。

WPF应用开发
111．	什么是WPF
112．	什么是XML的扩展XAML
113．	如何理解WPF基础体系结构
114．	WPF中的命令简述
115．	如何进行WPF的数据绑定
116．	WPF的多媒体开发


多线程
117．	解释Windows系统的进程
118．	解释Windows系统的线程
119．	简述Windows系统进程和线程的区别
120．	什么是多线程
121．	什么是超线程
122．	解释多线程中的并发
123．	多线程编程的优缺点
124．	如何理解C#中的死锁

堆和堆栈
125．	介绍C#中的堆
从下向下分配内存，所以已用空间在自由空间的下面。C#中所有引用类型对象要配在堆上，托管堆在内存中是连续分配的。并且内存对象的回收受垃圾回收机制管理。效率相对于堆栈来说低许多。
126．	介绍C#中的堆栈
Stack实际自向下进行填充，高内在地址指向低内在地址，并且分配是连续的，C#所有值类型和引用类型对象的引用都分配到堆栈上，堆栈根据对象先进后出原则，依次分配和释放内存，堆栈根据一个指向尾的指针来分配内存，执行效率较高。
127．	堆和堆栈有什么区别
128．	C#中的深拷贝和个浅复制
反射与特性
129．	什么是泛型

130．	泛型的主约束和次约束是什么
131．	什么是泛形集合
132．	请介绍SortedList的使用及特点
133．	请介绍Queue的使用及特点
134．	请介绍Stack的使用及特点
135．	什么是反射
136．	如何采用反射技术实现工厂模式
137．	C#如何通过反射调用DLL里面定义的一个类
138．	请解释.NET中的特性
139．	请列举说明如何自定义一个特性
多线程编程
140．	如何在程序中控制.NET的线程池
141．	如何控制多线程编程
142．	如何定义线程的优先级
143．	解释Thread类中的Join()方法
144．	介绍System.Threading.Timer
145．	如何检索线程池最在线程数与可用数
146．	多线程编程中如何控制好多个线程相互之间的联系
147．	怎么创建多线程独享的全局数据
流和序列化
148．	如何使用流类型
149．	Serializable特性如何实现对象实例的序列化
150．	.NET中可进行序列化操作的类型有哪些
151．	C#中如何自定义实现序列化和反序列化
程序调试
152．	如何捕获C#程序中的异常
153．	C#中如何自定义异常
154．	怎么避免类型转换时的异常
155．	简介C#中的Trace和Debug类
156．	在C#中如何使用EventLog创建自定义日志
157．	什么是GC
158．	如何手动释放未托管的资源
159．	解释C#中的弱引用
160．	什么是代(GC相关)

ASP。NET新特性
161．	简述ASP。NET动态数据
162．	如何配置ASP.NET Dynamic Data
163．	什么是Silverlight
164．	如何配置Silverlight开发环境
165．	什么是Dynamically Typed
166．	解释ADO.NET Entity Framework
167．	解释ADO.NET Entity Data Model是什么
168．	简介ADO.NET数据服务
169．	如何实现ADO.NET数据服务
170．	解释什么是ASP.NET MVC框架
171．	什么是ASP.NET Routing

ASP.NET 应用开发进阶
172．	请简述如何配置ASP.NET MVC
173．	什么是工作流
174．	如何应用工作流引擎（Workflow foundation）
175．	如何在新项目中调用自已有的Workflow foundation

算法设计与分析的基础方法
176．	什么是数组
177．	什么是递归
178．	什么是顺序表
179．	什么是单链表
180．	什么是二叉树
181．	介绍二叉树的顺序存储结构
182．	介绍二叉树的前序遍历与中序遍历方式
183．	什么是二分查找算法
184．	什么是冒泡排序算法
185．	什么是快速排序算法
186．	什么是归并排序算法
187．	什么是图的深度优先遍历


其它
1．	字符串池机制
CLR启动的时候，在内部创建一个容器，它以键值对的形式存在，键值是字符串对象内容，值是字符串在托管堆上的引用，当一个新的字符串对象创建的时候CLR检查在这些值中是否已经存在这个字符串对象，如果已经存在就返回对应的值，也就是在托管堆中的引用，如果不存在就在这个容器中中开辟空间存放这个字符串，返回在他的引用。

2. Asp.net 不同页面传参的方式。
	

